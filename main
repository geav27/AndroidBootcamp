fun main() {
    
    val amount = 100000.0
    var paymentMethod = "Cash"
    var payMethod: IPaymentMethod
    
    when(paymentMethod){
        
        "TC" -> {
			payMethod = CreditCard("1234 4321 1234 4321","12/2020","123")
    		payMethod.holderName = "John Doe"
    		payMethod.holderId = "1000.123.456"
        }
        
        "BT" -> {
            payMethod = BankTransfer("Bancolombia", "123-45678-321", "1234", "Bancolombia", "321-54321-123")
        }
        
        else -> {
            payMethod = Cash()
        }
    }       
    
	var payment = Payment(payMethod)
    println(payment.procesar(amount))
    
}

interface IPaymentMethod{
    fun pay(amount: Double): String
}

class CreditCard(val card_number: String,val exp_date: String, val cvv: String): IPaymentMethod{
           
    var holderName: String? = null
    var holderId: String? = null
    
    override fun pay(amount: Double): String{
        return "Pago procesado con TC por valor de $$amount"
    }
    
}

class BankTransfer(val originBank: String, origAccNum: String, val pin: String, val destBank: String, val destAccNum: String): IPaymentMethod{
    
    override fun pay(amount: Double): String{
        return "Pago procesado por Transferencia Bancaria por valor de $$amount"
    }
}

class Cash(): IPaymentMethod{
    
    override fun pay(amount: Double): String{
        return "Pago procesado en Efectivo por valor de $$amount"
    }
}

class Payment(val paymentMethod: IPaymentMethod){
    fun procesar(amount: Double): String{
		return paymentMethod.pay(amount)
	}
}
