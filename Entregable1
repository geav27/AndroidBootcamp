fun main() {
    
    val amount = 100000.0
    
	var payment = ExecutePayment(PaymentMethod().getPaymentMethod("TC"))
    println(payment.procesar(amount))
}

class PaymentMethod(){
    
    fun getPaymentMethod(paymentMethod: String): IPayment{
        
        var payMethod: IPayment
        
        when(paymentMethod){
        
            "TC" -> {
                payMethod = CreditCard("1234 4321 1234 4321","12/2020","123", "", "")
            }

            "TB" -> {
                payMethod = BankTransfer("Bancolombia", "123-45678-321", "1234", "Bancolombia", "321-54321-123")
            }

            else -> {
                payMethod = Cash()
            }
        }
        
        return payMethod
    }
}

interface IPayment{
    fun pay(amount: Double): String
}

class CreditCard(val card_number: String, val exp_date: String, val cvv: String, val holderName: String, val holderId: String): IPayment{
           
    override fun pay(amount: Double): String{
        return "Pago procesado con TC por valor de $$amount"
    }
}

class BankTransfer(val originBank: String, origAccNum: String, val pin: String, val destBank: String, val destAccNum: String): IPayment{
    
    override fun pay(amount: Double): String{
        return "Pago procesado por Transferencia Bancaria por valor de $$amount"
    }
}

class Cash(): IPayment{
    
    override fun pay(amount: Double): String{
        return "Pago procesado en Efectivo por valor de $$amount"
    }
}

class ExecutePayment(val paymentMethod: IPayment){
    
    fun procesar(amount: Double): String{
		return paymentMethod.pay(amount)
	}
}
