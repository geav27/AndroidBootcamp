fun main(){
    
    val tipoDeEmpleado: Int = 1
    val empleado = asignarTipoDeEmpleado(tipoDeEmpleado)
    val nomina = Nomina(empleado)
    println(nomina.calcularNomina())
    
}

fun asignarTipoDeEmpleado(tipo:Int = 1): Empleado{
    
    var empleado: Empleado

    when(tipo){
        2 -> {empleado = Operador()}
        3 -> {empleado = Contador()}
        else -> {empleado = Gerente()}
    }
    
    return empleado
}

class Nomina(val empleado: Empleado){
    fun calcularNomina(): Double{
        return empleado.calcularPagoMensual()
    }
}

interface Empleado{
    val salarioXHora: Double
    val horasXMes: Int
    val salario: Double
    val bono: Double
    
    fun calcularPagoMensual(): Double
}

class Gerente(): Empleado{
    override val salarioXHora: Double = 200.0
    override val horasXMes: Int = 200
    override val salario: Double
    	get() = horasXMes * salarioXHora 
    override val bono: Double = 0.0
    
    override fun calcularPagoMensual(): Double{
        return salario + bono
    }
}

class Operador(): Empleado{
    override val salarioXHora: Double = 10.0
    override val horasXMes: Int = 230
    override val salario: Double
    	get() = horasXMes * salarioXHora 
	override val bono: Double
    	get() = 10 * salarioXHora

    override fun calcularPagoMensual(): Double{
        return salarioXHora * horasXMes + bono
    }
}

class Contador(): Empleado{
    override val salarioXHora: Double = 50.0
    override val horasXMes: Int = 200
    override val salario: Double
    	get() = horasXMes * salarioXHora 
	override val bono: Double = 0.0

    override fun calcularPagoMensual(): Double{
        return salarioXHora * horasXMes + bono
    }
}
